
public class PrintfEx1 {

	public static void main(String[] args) {
		System.out.println(10.0 / 3);	// 결과를 실수로 받으려면, 실수형 리터럴를 사용해야 한다.
		
		// 정수 출력을 위한 지사자 
		
		System.out.printf("%d%n", 15);	// 15, 정수를 10진수로 출력하기 위해 지시자 %d를 사용하여 15를 출력
		// printf는 println과 다르게 자동으로 줄바꿈을 해주지 않는다. 그래서 %n를 사용하는데 %n(\n)은 개행문자로 줄바꿈을 해준다.
		System.out.printf("%#o%n", 15);	// 17, 정수를 8진수로 출력하기 위해 지시자 %o를 사용하여 15를 출력
		// 8진수와, 16진수는 접두사 0과 0x가 사용되는데, 접두사도 같이 출력하고 싶다면, %뒤에 #을 넣어주면 된다.
		System.out.printf("%#x%n", 15);	// f, 정수를 16진수로 출력하기 위해 지시자 %x를 사용하여 15를 출력
		System.out.printf("%s%n", Integer.toBinaryString(15));	// 1111, 정수를 2진수로 출력하기 위한 지시자가 따로 없기 때문에
		// Integer 클래스의 toBinaryString() 메소드를 사용해야 한다. 이 메소드 안에 인자로 변환할 수를 넣어주면 String 타입으로 2진수를 반환해주기 때문에
		// 지시자는 String형인 %s를 사용해준다.
		System.out.printf("[%5d]%n", 10);	// [   10], 정수를 무조건 5자리로 출력하기 위해 지시자 %5d를 사용하여 10를 출력
		// 5자리로 출력하는데 출력할 수는 두자리이기 때문에 앞에 세자리는 공백으로 출력
		System.out.printf("[%-5d]%n", 10);	// [10   ], 정수를 무조건 5자리로 출력하고 왼쪽정렬을 위해 지시자 %-5d를 사용하여 10를 출력
		// 5자리로 출력하는데 왼쪽정렬하여 출력하고 싶다면 자리수 앞에 -를 붙여주면된다. 출력할 수는 두자리이기 때문에 뒤에 세자리는 공백으로 출력
		System.out.printf("[%05d]%n", 10);	// [00010], 정수를 무조건 5자리로 출력하고 공백을 0으로 채우기 위해 지시자 %05d를 사용하여 10를 출력
		// 공백으로 출력될 것을 0으로 출력
		System.out.printf("[%5d]%n", 1234567);	// [1234567], 출력할 자리수를 5자리로 설정했지만 출력할 숫자가 더 크기 떄문에 출력할 수 자리수만큼 출력
		
		// 실수 출력을 위한 지시자
		
		float f = 123.456789f;	// float형의 변수 f를 선언 및 123.456789로 초기화
		double d = 123.456789;	// double형의 변수 d를 선언 및 123.456789로 초기화
		
		System.out.printf("%f%n", f);	// 123.456787, 실수를 출력하기 위해 지시자 %f를 사용하여 변수 f를 출력
		// float형은 7자리까지만 정확하기 때문에 123.4567까지는 정확한 값을 출력하지만, 그 뒤의 수들은 정확하지 않다.
		System.out.printf("%f%n", d);	// 123.456787, 실수를 출력하기 위해 지시자 %f를 사용하여 변수 d를 출력
		// double형은 15자리까지 정확하기 때문에 123.456789라는 정확한 값을 출력
		System.out.printf("%e%n", f);	// 1.234568e+02, 실수를 지수 형태로 출력하기 위해 지시자 %e를 사용하여 변수 f를 출력
		System.out.printf("%g%n", f);	// 123.457, 실수를 간략한 형태로 출력하기 위해 지시자 %g를 사용하여 변수 f를 출력
		// 지시자 g는 표현할 수 있는 형태중 가장 간략한 형태로 출력을 해주며, 소수점 포함 7자리로 표현해준다. 맨 뒤의 수는 반올림을 해준다.

		double d2 = 1.23456789;
		
		System.out.printf("%f%n", d2);	// 1.234568, 실수를 출력하기 위해 지시자 %f를 사용하여 변수 d2를 출력
		// 맨 뒤에 7를 반올림하여 8로 표현
		System.out.printf("[%14.10f]%n", d2);	// [  1.2345678900], 실수를 총 14자리에 소수점 자리를 10자리로 출력하기 위해 지시자 %14.10f를 사용하여 변수 d2를 출력
		// 총 14자리이고, 소수점 자리를 10자리로 표현하게 설정, 정수 자리는 총 4자리로 표현 가능하지만 d2의 정수자리는 한자리이기 때문에 앞부분을 공백으로 채우고,
		// 소수점 자리가 10자리이지만, d2의 소수자리는 8자리이기 때문에 뒤에 수는 0으로 채움
		System.out.printf("[%14.6f]%n", d2);	// [      1.234568], 실수를 총 14자리에 소수점 자리를 6자리로 출력하기 위해 지시자 %14.6f를 사용하여 변수 d2를 출력
		// 총 14자리이고, 소수점 자리를 6자리로 표현하게 설정, 정수 자리는 총 8자리로 표현 가능하지만 d2의 정수자리는 한자리이기 때문에 앞부분을 공백으로 채우고,
		// 소수점 자리가 6자리이지만, d2의 소수자리는 8자리이기 때문에 뒤에 수는 6자리에서 반올림하여 표현
		// 표현하는 것만 반올림하여 표현해준다. 실제 저장된 값은 1.23456789 그대로 저장이 된다.
		System.out.printf("[%.6f]%n", d2);	// [1.234568], 실수를 소수점 자리를 6자리로 출력하기 위해 지시자 %.6f를 사용하여 변수 d2를 출력
		// 정수자리는 그대로 표현이 되고, 소수자리만 6자리로 표현, d2는 소수자리가 8자리이기 때문에 6자리에서 반올림하여 표현
		
		// 문자 출력을 위한 지시자
		System.out.printf("[%s]%n", "www.codechobo.com");	// [www.codechobo.com], 문자열을 출력하기 위해 지시자 %s를 사용하여 문자열 출력
		System.out.printf("[%20s]%n", "www.codechobo.com");	// [   www.codechobo.com], 문자열을 20자리로 출력하기 위해 지시자 %20s를 사용하여 문자열 출력
		// 무조건 20자리로 표현되어야 하기 때문에 앞에 사용되지 않는 자리는 공백으로 채움
		System.out.printf("[%-20s]%n", "www.codechobo.com");	// [www.codechobo.com   ], 문자열을 20자리로 왼쪽정렬하여 출력하기 위해 지시자 %-20s를 사용하여 문자열 출력
		System.out.printf("[%.10s]%n", "www.codechobo.com");	// [www.codech], 문자열을 앞에 10자리까지만 부분 출력하기 위해 지시자 %.10s를 사용하여 문자열 부분 출력
	}

}
